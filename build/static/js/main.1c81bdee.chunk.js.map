{"version":3,"sources":["socket.js","store.js","components/Login.jsx","components/Chat.jsx","App.js","index.js"],"names":["socket","io","state","action","type","joined","user","payload","room","users","messages","Login","onLogin","React","useState","setUser","isLoading","setLoading","url","window","location","href","match","Math","floor","random","onEnter","a","alert","obj","axios","post","className","placeholder","value","onChange","e","target","disabled","onClick","Chat","onAddMessage","messageValue","setMessageValue","messagesRef","useRef","useEffect","current","scroll","scrollHeight","rel","host","length","map","name","index","ref","message","text","time","rows","now","Date","date","format","emit","App","useReducer","store","dispatch","get","data","setUsers","addMessage","on","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c81bdee.chunk.js","sourcesContent":["import io from 'socket.io-client';\n\nconst socket = io();\n\nexport default socket;\n","export default (state, action) => {\n  switch (action.type) {\n    case 'ENTERED':\n      return {\n        ...state,\n        joined: true,\n        user: action.payload.user,\n        room: action.payload.room,\n      };\n\n    case 'SET_DATA':\n      return {\n        ...state,\n        users: action.payload.users,\n        messages: action.payload.messages,\n      };\n\n    case 'SET_USERS':\n      return {\n        ...state,\n        users: action.payload,\n      };\n\n    case 'NEW_MESSAGE':\n      return {\n        ...state,\n        messages: [...state.messages, action.payload],\n      };\n\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport axios from 'axios';\n\nfunction Login({ onLogin }) {\n \n  const [user, setUser] = React.useState('');\n  const [isLoading, setLoading] = React.useState(false);\n\n  const url = window.location.href;\n  let room = (url.match(\"/room/(.*)\")) ? \n                    (url.match(\"/room/(.*)\")[1]) : \n                      window.location.href = url + \"/room/\" + \n                        Math.floor(Math.random() * 9000000) + 1;\n  \n\n  const onEnter = async () => {\n    if (!user) {\n      return alert('Введите ник');\n    } \n    const obj = {\n      room,\n      user,\n    };\n    setLoading(true);\n    await axios.post('/room', obj);\n    onLogin(obj);\n  };\n\n  return (\n    <div className=\"login\">\n       \n      <input\n        type=\"text\"\n        placeholder=\"Введите ник\"\n        value={user}\n        onChange={(e) => { setUser(e.target.value);}}\n      />\n      <button disabled={isLoading} onClick={onEnter} className=\"btn btn-success\">\n        {isLoading ? 'Соединение...' : 'Войти в чат'}\n      </button>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from 'react';\nimport socket from '../socket';\nimport date from 'date-and-time';\n\n\nfunction Chat({ users, messages, user, room, onAddMessage }) {\n  const [messageValue, setMessageValue] = React.useState('');\n  const messagesRef = React.useRef(null);\n\n  const onSendMessage = () => {\n    const now = new Date();\n    const time = date.format(now, 'DD.MM.YY HH:mm');\n    socket.emit('ROOM:NEW_MESSAGE', {\n      room,\n      user,\n      time,\n      text: messageValue,\n    });\n    onAddMessage({ user, time, text: messageValue });\n    setMessageValue('');\n  };\n\n  React.useEffect(() => {\n    messagesRef.current.scroll(0, messagesRef.current.scrollHeight);\n  }, [messages]);\n\n  return (\n    <div>\n      <h4 className=\"mb-4 text-center\">Вы находитесь в чате-комнате: <b>{room}</b></h4>\n      <h6 className=\"mb-4 text-center\">Пригласить в чат: \n        <a href={ \"/room/\" + room } target=\"_blank\" rel=\"noopener noreferrer\">\n         { window.location.host + \"/room/\" + room }\n         </a>\n      </h6>\n    <div className=\"chat\">\n      \n      <div className=\"chat-users\">\n        Вы: <b>{user}</b>\n        <hr />\n        <p>Онлайн ({users.length}):</p>\n        <ul>\n          {users.map((name, index) => (\n            <li>{name}\n                <span className=\"position-absolute top-0 start-100 translate-middle p-1 bg-success border border-light rounded-circle text-center\">\n            </span>\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"chat-messages\">\n        <div ref={messagesRef} className=\"messages\">\n          {messages.map((message) => (\n            <div className={(message.user === user) ? 'your-message' :  'message'}>\n              <p>{message.text}<br/>\n              </p>\n              <div>\n                <span>{(message.user === user) ? '(' + message.time + ') Вы' :  message.user + ' (' + message.time + ')'}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n        <form>\n          <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n          <textarea\n            value={messageValue}\n            onChange={(e) => setMessageValue(e.target.value)}\n            className=\"form-control\"\n            rows=\"1\"></textarea>\n              <button onClick={onSendMessage} type=\"button\" className=\"btn btn-success ml-2 btn-send\">\n            Отправить\n          </button>\n          </div>\n          \n        </form>\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from 'react';\nimport axios from 'axios';\nimport socket from './socket';\nimport store from './store';\nimport Login from './components/Login';\nimport Chat from './components/Chat';\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(store, {\n    joined: false,\n    room: null,\n    user: null,\n    users: [],\n    messages: [],\n  });\n\n  const onLogin = async (obj) => {\n    dispatch({\n      type: 'ENTERED',\n      payload: obj,\n    });\n    socket.emit('ROOM:ENTER', obj);\n    const { data } = await axios.get(`/room/${obj.room}`);\n    dispatch({\n      type: 'SET_DATA',\n      payload: data,\n    });\n  };\n\n  const setUsers = (users) => {\n    dispatch({\n      type: 'SET_USERS',\n      payload: users,\n    });\n  };\n\n  const addMessage = (message) => {\n    dispatch({\n      type: 'NEW_MESSAGE',\n      payload: message,\n    });\n  };\n\n  React.useEffect(() => {\n    socket.on('ROOM:SET_USERS', setUsers);\n    socket.on('ROOM:NEW_MESSAGE', addMessage);\n  }, []);\n\n\n  return (\n    <div className=\"main\">\n      {!state.joined ? (\n        <Login onLogin={onLogin} />\n      ) : (\n        <Chat {...state} onAddMessage={addMessage} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}